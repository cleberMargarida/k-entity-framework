name: .NET Workflow

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: |
      startsWith(github.event.head_commit.message, 'build') ||
      startsWith(github.event.head_commit.message, 'refactor') ||
      startsWith(github.event.head_commit.message, 'perf') ||
      startsWith(github.event.head_commit.message, 'fix') ||
      startsWith(github.event.head_commit.message, 'feat') ||
      startsWith(github.event.head_commit.message, 'test')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for Nerdbank.GitVersioning

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

  unit-tests:
    name: Unit Tests
    needs: [build]
    runs-on: ubuntu-latest
    if: |
      startsWith(github.event.head_commit.message, 'refactor') ||
      startsWith(github.event.head_commit.message, 'perf') ||
      startsWith(github.event.head_commit.message, 'fix') ||
      startsWith(github.event.head_commit.message, 'feat') ||
      startsWith(github.event.head_commit.message, 'test')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Run Unit Tests
      run: dotnet test tests/K.EntityFrameworkCore.UnitTests/ --collect:"XPlat Code Coverage" --results-directory coverage/unit -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude="[K.EntityFrameworkCore.CodeGen]*"

    - name: Unit Test Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: 'coverage/unit/**/*.cobertura.xml'
        badge: true
        format: 'markdown'
        output: 'both'
        tag: 'unit-tests'

    - name: Upload Unit Test Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: coverage/unit/**/*.cobertura.xml
        flags: unit-tests
        name: unit-tests
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

    - name: Write Unit Test Summary
      run: |
        echo "## Unit Test Coverage" >> $GITHUB_STEP_SUMMARY
        cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

  integration-tests:
    name: Integration Tests
    needs: [unit-tests]
    runs-on: ubuntu-latest
    if: |
      (startsWith(github.event.head_commit.message, 'refactor') ||
       startsWith(github.event.head_commit.message, 'perf') ||
       startsWith(github.event.head_commit.message, 'fix') ||
       startsWith(github.event.head_commit.message, 'feat') ||
       startsWith(github.event.head_commit.message, 'test')) &&
      !contains(github.event.head_commit.message, '[skip-integration]')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Run Integration Tests
      run: dotnet test tests/K.EntityFrameworkCore.IntegrationTests/ --collect:"XPlat Code Coverage" --results-directory coverage/integration -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Exclude="[K.EntityFrameworkCore.CodeGen]*"

    - name: Integration Test Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: 'coverage/integration/**/*.cobertura.xml'
        badge: true
        format: 'markdown'
        output: 'both'
        tag: 'integration-tests'

    - name: Upload Integration Test Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: coverage/integration/**/*.cobertura.xml
        flags: integration-tests
        name: integration-tests
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

    - name: Write Integration Test Summary
      run: |
        echo "## Integration Test Coverage" >> $GITHUB_STEP_SUMMARY
        cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: ${{ github.event_name == 'pull_request' }}
      with:
        recreate: true
        header: coverage-report
        message: |
          ## Test Coverage Report
          
          ### Unit Tests
          Please see the unit test coverage in the job summary.
          
          ### Integration Tests
          Please see the integration test coverage in the job summary.
    
  publish:
    name: Publish to NuGet
    needs: [integration-tests, unit-tests]
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/master' && 
      github.event_name == 'push' && 
      (startsWith(github.event.head_commit.message, 'fix') ||
       startsWith(github.event.head_commit.message, 'feat')) &&
      (always() && (needs.integration-tests.result == 'success' || (needs.integration-tests.result == 'skipped' && needs.unit-tests.result == 'success')))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for Nerdbank.GitVersioning

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: Install Nerdbank.GitVersioning Tool
        run: dotnet tool install --global nbgv || dotnet tool update --global nbgv

      - name: Restore Nerdbank.GitVersioning Version Info
        run: nbgv get-version --format json > version.json

      - name: Extract Version Number
        id: get_version
        run: echo "version=$(jq -r '.NuGetPackageVersion' version.json)" >> $GITHUB_OUTPUT

      - name: Pack NuGet package
        run: |
             dotnet restore
             dotnet pack src/K.EntityFrameworkCore/K.EntityFrameworkCore.csproj -c Release -p:Version=${{ steps.get_version.outputs.version }} --no-restore --include-symbols -p:SymbolPackageFormat=snupkg

      - name: Upload Package Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: |
            src/K.EntityFrameworkCore/bin/Release/*.nupkg
            src/K.EntityFrameworkCore/bin/Release/*.snupkg

      - name: Find and push NuGet package
        run: |
          # Find the .nupkg file
          PACKAGE_FILE=$(find src/K.EntityFrameworkCore/bin/Release -name '*.nupkg')
          
          # Check if the file exists
          if [ -z "$PACKAGE_FILE" ]; then
            echo "No .nupkg file found!"
            exit 1
          fi
      
          echo "Found package: $PACKAGE_FILE"
          
          # Push the package
          dotnet nuget push "$PACKAGE_FILE" -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate

  release:
    name: Create GitHub Release
    needs: [publish]
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/master' && 
      github.event_name == 'push' && 
      (startsWith(github.event.head_commit.message, 'fix') ||
       startsWith(github.event.head_commit.message, 'feat')) &&
      (always() && needs.publish.result == 'success')
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Package Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./packages

      - name: Extract Version from NuGet Package
        id: version
        run: |
          # Find the .nupkg file and extract version from filename
          PACKAGE_FILE=$(find ./packages -name "*.nupkg" | head -1)
          if [ -z "$PACKAGE_FILE" ]; then
            echo "No .nupkg file found!"
            exit 1
          fi
          
          # Extract version from filename (e.g., K.EntityFrameworkCore.1.0.16.nupkg -> 1.0.16)
          VERSION=$(basename "$PACKAGE_FILE" | sed 's/.*\.\([0-9]\+\.[0-9]\+\.[0-9]\+.*\)\.nupkg$/\1/')
          echo "Extracted version: $VERSION from package: $PACKAGE_FILE"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # First release
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Generate changelog since last tag
            CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Save changelog to file
          echo "## What's Changed" > changelog.md
          echo "" >> changelog.md
          echo "$CHANGELOG" >> changelog.md
          echo "" >> changelog.md
                    echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...v${{ steps.version.outputs.version }}" >> changelog.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body_path: changelog.md
          files: |
            packages/*.nupkg
            packages/*.snupkg
          draft: false
          prerelease: false
          generate_release_notes: true

  documentation:
    name: Build and Deploy Documentation
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/master' && 
      github.event_name == 'push' && 
      (startsWith(github.event.head_commit.message, 'docs') ||
       startsWith(github.event.head_commit.message, 'feat'))
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build for Documentation
        run: dotnet build -c Release --no-restore

      - name: Install DocFX
        run: dotnet tool install -g docfx

      - name: Build Documentation
        run: |
          # Build docs with the new output location
          docfx docfx.json

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./bin/docs

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
